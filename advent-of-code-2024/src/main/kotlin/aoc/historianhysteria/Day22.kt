package aoc.historianhysteria

import aoc.utils.ChallengeDay
import java.nio.file.Path
import kotlin.io.path.readLines


class Day22(private val input: List<String>) : ChallengeDay {
    constructor(path: Path) : this(path.readLines())

    /**
     * What is the sum of the 2000th secret number generated by each buyer?
     */
    override fun part1(): Long = input.sumOf {
        secretNrs(it.toLong()).drop(1).take(2_000).last()
    }

    /**
     * Figure out the best sequence to tell the monkey so that by looking for that same sequence of changes in every buyer's future prices,
     * you get the most bananas in total.
     *
     * What is the most bananas you can get?
     *
     * Solution from https://github.com/zebalu/advent-of-code-2024/blob/master/aoc2024/src/main/java/io/github/zebalu/aoc2024/days/Day22.java
     */
    override fun part2(): Long {
        val summingMap = HashMap<Long, Long>()
        for (s in input) {
            val prices = secretNrs(s.toLong())
                .map { it % 10L }
                .take(2001)
                .toList()
            val seenDiffs = HashSet<Long>()
            var runningDiff = 0L
            for (i in 1..<prices.size) {
                runningDiff = (runningDiff % RADIX3) * RADIX + (prices[i] - prices[i - 1] + 9)
                if (i >= 4 && seenDiffs.add(runningDiff)) {
                    summingMap.merge(runningDiff, prices[i], Long::plus)
                }
            }
        }
        return summingMap.values.max()
    }

    companion object {

        /** genius speedup trick from @p-kovacs
         * check original at: [solution of p-kovacs](https://github.com/p-kovacs/advent-of-code-2024/blob/master/src/main/java/com/github/pkovacs/aoc/y2024/Day22.java) */
        private const val RADIX = 19
        private const val RADIX3: Int = RADIX * RADIX * RADIX

        internal fun secretNrs(seed: Long): Sequence<Long> = Sequence {
            object : Iterator<Long> {
                var sn = seed
                override fun hasNext(): Boolean = true
                override fun next(): Long {
                    val next = sn
                    sn = (sn * 64).mix().prune()
                    sn = (sn / 32).mix().prune()
                    sn = (sn * 2048).mix().prune()
                    return next
                }

                private fun Long.mix(): Long = sn xor this
                private fun Long.prune(): Long = this % 16777216
            }
        }
    }
}
